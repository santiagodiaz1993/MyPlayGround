# TODO(santiago): organize and documnet
# TODO(santiago): convert all code into functions and put it in another file
import os
import subprocess
import matplotlib.pyplot as plt
from datetime import datetime as dt
import datetime, subprocess
from reminders.get_document import *
from email_api.gmailapi import *
from drive_api.drive_api import *


def log_tasks(path, file_name, tasks_to_log):
    current_date = str(dt.date.today())
    file_path = "task_logging/" + current_date + "/" + file_name + ".txt"
    subprocess.call("mkdir " + file_path, shell=True)
    subprocess.call("touch " + file_path, shell=True)
    with open(file_path, "w") as task_completed:
        task_completed.write(tasks_to_log)


def extract_reminders_document(reminder_doc):
    reminder_doc = reminder_doc.split(" //-//")
    reminder_doc = [reminder.strip() for reminder in reminder_doc]
    reminder_doc = [reminder.split("$$") for reminder in reminder_doc]
    reminder_doc = [reminder[:-1] for reminder in reminder_doc]
    reminder_doc = reminder_doc[:-1]
    return reminder_doc


def check_for_high_priority(tasks_document):
    for reminder in tasks_document:
        if reminder[3] != " None":
            tasks_with_priority = []
            tasks_with_priority.append(reminder)
            return tasks_with_priority


def get_tasks_in_time_range(reminders, number_of_days):
    last_week_reminders = []
    for reminder in reminders:
        date = reminder[2]
        date = dt.strptime(date, " %b %d, %Y at %I:%M%p")
        today = dt.today()
        start_date_range = today - datetime.timedelta(days=number_of_days)
        if date >= start_date_range:
            last_week_reminders.append(reminder)
        else:
            print("there are no new reminders")
    return last_week_reminders


def classify_by_date_range(reminders, number_of_days):
    range_assignmnet_dates = {}
    starting_limit_date = dt(2020, 5, 1).date()
    date_range = []
    date = dt.today().date()
    while starting_limit_date < date:
        date_range.append(date)
        date = date - datetime.timedelta(days=number_of_days)
    for index in range(1, len(date_range)):
        range_assignmnet_dates["range" + str(index)] = 0
    for index in range(len(date_range) - 1):
        for index2, reminder in enumerate(reminders):
            date_format = " %b %d, %Y at %I:%M%p"
            date_reminder = dt.strptime(reminder[2], date_format)
            date_reminder = date_reminder.date()
            if date_range[index] >= date_reminder >= date_range[index + 1]:
                range_assignmnet_dates["range" + str(index + 1)] += 1
    return range_assignmnet_dates


def categorize_tasks(list_of_tasks):
# TODO(santiago): sync and verify the dictionary with the reminders app
    categories = {
        "Work": 0,
        "Personal Errands": 0,
        "Artificial Inteligence Podcast": 0,
        "Testing List": 0
    }
    for reminder in list_of_tasks:
        for category in categories:
            if reminder[0] == category:
                categories[category] += 1
    return categories


def load_template(template, reminders_completed, reminders_initiated):
    template_path = "templates/" + str(template) + ".txt"
    with open(template_path) as chosen_template:
        read_file = chosen_template.read()
        read_file = read_file % (reminders_completed, reminders_initiated)
        print(read_file)
        return read_file

def get_tasks_name(list_of_tasks):
    name_of_tasks = ""
    for task in list_of_tasks:
        tasks_name = tasks[1]
        name_of_tasks.append(tasks_name + ",")

    return name_of_tasks


# TODO(santiagodiaz): Rre)ove unecessary scopes
SCOPES = ["https://www.googleapis.com/auth/drive.activity.readonly",
          "https://www.googleapis.com/auth/documents",
          "https://mail.google.com/",
          "https://www.googleapis.com/auth/drive.activity.readonly"]

COMPLETED_TASKS_ID = "19GFEhbZ0KlWknhEw6Js0mCEeIwNQgVeif-3Bw_yFpVs"
INITIATED_TASKS_ID = "1HuonqcF3SwcfwTebKL2hCNW3LjZ87jrC4byV_Zh7PQ0"

reminders_completed = get_text(COMPLETED_TASKS_ID)
reminders_started = get_text(INITIATED_TASKS_ID)


reminders_completed_list = extract_reminders_document(reminders_completed)
reminders_initiated_list = extract_reminders_document(reminders_started)

current_date = str(dt.today().date())
range_of_reminders_completed = classify_by_date_range(reminders_completed_list, 3)
plt.bar(range_of_reminders_completed.keys(), range_of_reminders_completed.values())
plt.savefig("productivity_chart_" + current_date + ".png")
plt.show()

number_of_tasks_completed = len(reminders_completed_list)
number_of_tasks_initiated = len(reminders_initiated_list)

categorized_tasks = categorize_tasks(reminders_completed_list)
floats = [int(categorized_tasks[v]) for v in categorized_tasks]
keys = [keys for keys in categorized_tasks]
print(floats)
plt.pie(floats,labels = keys)
plt.savefig("productivity_distribution_" + str(current_date) + ".png")
plt.show()

print("these is the number of taks created past 8 days")
print(len(get_tasks_in_time_range(reminders_initiated_list, 8)))
print("These are the tasks that were completed in the past 8 days")
print(len(get_tasks_in_time_range(reminders_completed_list, 8)))

print("These are the tasks with prority set")
print(check_for_high_priority(reminders_completed_list))
print(check_for_high_priority(reminders_initiated_list))

template = """Happy day Santiago, during the past week you have closed the following tickets:
    %s
    And during the past week you have opened the new following tickets:
    %s """ % (reminders_completed_list, reminders_initiated_list)


request_message = CreateMessageWithAttachment(
    "santiagobmxdiaz@gmail.com",
    "santiagobmxdiaz@gmail.com",
    "weekly Productivity Report",
    load_template("template1", str(number_of_tasks_completed), str(number_of_tasks_initiated)),
    "",
    ["productivity_distribution_" + current_date + ".png",
     "productivity_chart_" + current_date + ".png"])

SendMessage(authorization(), "santiagobmxdiaz@gmail.com", request_message)


